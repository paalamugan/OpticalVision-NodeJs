{"version":3,"sources":["webpack:///./src/app/custom-validators/custom-validator.ts","webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.scss","webpack:///./src/app/register/register.component.ts","webpack:///./src/app/register/register.module.ts","webpack:///./src/app/services/signup.service.ts"],"names":[],"mappings":"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","file":"register-register-module.js","sourcesContent":["import {FormControl, AbstractControl, FormGroup,NgForm, FormGroupDirective } from \"@angular/forms\";\r\nimport{AbstractClassPart} from '@angular/compiler/src/output/output_ast';\r\n\r\nexport function passValidator(control: AbstractControl) {\r\n    if (control && (control.value !== null || control.value !== undefined)) {\r\n      const cnfpassValue = control.value;\r\n\r\n      const passControl = control.root.get('password');\r\n      if (passControl) {\r\n        const passValue = passControl.value;\r\n        if (passValue !== cnfpassValue || passValue === '') {\r\n          return {\r\n            passValidator: true\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  export class UsernameValidator {\r\n    static validUsername(fc: FormControl){\r\n      if(fc.value.toLowerCase() === \"abc123\" || fc.value.toLowerCase() === \"123abc\"){\r\n        return ({validUsername: true});\r\n      } else {\r\n        return (null);\r\n      }\r\n    }\r\n  }\r\n  export function pincodeValidator(control:AbstractControl){\r\n    if (control && (control.value !== null || control.value !== undefined)) {\r\n\r\n        const regrex=new RegExp('^[0-9]{6}$');\r\n        if(!regrex.test(control.value)){\r\n        return {\r\n    isError: true\r\n        }\r\n    }\r\n    }\r\n    return null;\r\n  }\r\n//   export class PasswordValidator {\r\n//     // Inspired on: http://plnkr.co/edit/Zcbg2T3tOxYmhxs7vaAm?p=preview\r\n//     static areEqual(formGroup: FormGroup) {\r\n//       let value;\r\n//       let valid = true;\r\n//       for (let key in formGroup.controls) {\r\n//         if (formGroup.controls.hasOwnProperty(key)) {\r\n//           let control: FormControl = <FormControl>formGroup.controls[key];\r\n  \r\n//           if (value === undefined) {\r\n//             value = control.value\r\n//           } else {\r\n//             if (value !== control.value) {\r\n//               valid = false;\r\n//               break;\r\n//             }\r\n//           }\r\n//         }\r\n//       }\r\n  \r\n//       if (valid) {\r\n//         return null;\r\n//       }\r\n  \r\n//       return {\r\n//         areEqual: true\r\n//       };\r\n//     }\r\n //}\r\n  export var account_validation_messages = {\r\n      'companyname':[\r\n      { type: 'required', message: 'CompanyName is required'}\r\n      ],\r\n    'username': [\r\n      { type: 'required', message: 'Username is required' },\r\n      { type: 'minlength', message: 'Username must be at least 5 characters long' },\r\n      { type: 'maxlength', message: 'Username cannot be more than 25 characters long' },\r\n      { type: 'pattern', message: 'Your username must contain only numbers and letters' },\r\n      { type: 'validUsername', message: 'Your username has already been taken' }\r\n    ],\r\n    'email': [\r\n      { type: 'required', message: 'Email is required' },\r\n      { type: 'pattern', message: 'Enter a valid email' }\r\n    ],\r\n    'confirm_password': [\r\n      { type: 'required', message: 'Confirm password is required' },\r\n      { type: 'passValidator', message: 'Password mismatch' }\r\n    ],\r\n    'password': [\r\n      { type: 'required', message: 'Password is required' },\r\n      { type: 'minlength', message: 'Password must be at least 3 characters long' },\r\n      { type: 'pattern', message: 'Your password must contain Character Only' }\r\n    ],\r\n    'address':[\r\n        { type: 'required', message: 'Address is required' },\r\n    ],\r\n    'phonenumber':[\r\n        { type: 'required', message: 'phoneNumber is required' },\r\n        { type: 'minlength', message: 'phoneNumber must be a 10 Digit long' },\r\n        { type: 'pattern', message: 'Your phoneNumber must contain Numbers Only' },\r\n    ],\r\n    'terms': [\r\n      { type: 'pattern', message: 'You must accept terms and conditions' }\r\n    ]\r\n    }","module.exports = \"\\r\\n<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" style=\\\"background-color:#e0e0e0;\\\">\\r\\n\\r\\n    <mat-card fxFlex=\\\"50\\\" class=\\\"mat-elevation-z4 visionheight\\\">\\r\\n      <mat-card-title style=\\\"text-align:center\\\" class=\\\"opticvision\\\">\\r\\n  \\r\\n        <img src=\\\"assets/camera.png\\\" width=\\\"50px\\\">\\r\\n        <span>ptic Visions</span>\\r\\n  \\r\\n      </mat-card-title>\\r\\n      <mat-card-content class=\\\"opticvision_1\\\">\\r\\n        <div class=\\\"backgroundcolor\\\">\\r\\n          <h3 style=\\\"text-align:center; padding: 5px;\\\">Sign Up For Admin</h3>\\r\\n        </div>\\r\\n  \\r\\n        <form  [formGroup]=\\\"RegistrationForm\\\" class=\\\"example-container\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\"\\r\\n          #userForm=\\\"ngForm\\\">\\r\\n          <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\r\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                    <input matInput type=\\\"text\\\" placeholder=\\\"CompanyName\\\" formControlName=\\\"companyName\\\" required>\\r\\n                    <mat-error *ngFor=\\\"let validation of account_validation_messages.companyname\\\">\\r\\n                      <mat-error class=\\\"error-message\\\" *ngIf=\\\"RegistrationForm.get('companyName').hasError(validation.type) && (RegistrationForm.get('companyName').dirty || RegistrationForm.get('companyName').touched)\\\">{{validation.message}}</mat-error>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n              \\r\\n             \\r\\n            \\r\\n             \\r\\n            </div>\\r\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n              <mat-form-field class=\\\"full-width\\\">\\r\\n                <input matInput placeholder=\\\"Tin Number\\\" formControlName=\\\"tinNumber\\\" id=\\\"tinNumber\\\">\\r\\n  \\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\r\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                    <input matInput type=\\\"text\\\" placeholder=\\\"UserName\\\" formControlName=\\\"userName\\\" required>\\r\\n                    <mat-error *ngFor=\\\"let validation of account_validation_messages.username\\\">\\r\\n                      <mat-error class=\\\"error-message\\\" *ngIf=\\\"RegistrationForm.get('userName').hasError(validation.type) && (RegistrationForm.get('userName').dirty || RegistrationForm.get('userName').touched)\\\">{{validation.message}}</mat-error>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n              <!-- <mat-form-field class=\\\"example-container\\\" fxFlex=\\\"100\\\">\\r\\n                <input matInput placeholder=\\\"UserName\\\" formControlName=\\\"userName\\\" id=\\\"userName\\\"\\r\\n                  required>\\r\\n  \\r\\n              </mat-form-field>\\r\\n              <span *ngIf=\\\"isValid('userName')\\\">userName is required</span> -->\\r\\n            </div>\\r\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                    <input matInput type=\\\"email\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\r\\n                    <mat-error *ngFor=\\\"let validation of account_validation_messages.email\\\">\\r\\n                      <mat-error class=\\\"error-message\\\" *ngIf=\\\"RegistrationForm.get('email').hasError(validation.type) && (RegistrationForm.get('email').dirty || RegistrationForm.get('email').touched)\\\">{{validation.message}}</mat-error>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                <!-- <mat-form-field>\\r\\n                  <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\"  id=\\\"email\\\"\\r\\n                    required>\\r\\n    \\r\\n                </mat-form-field>\\r\\n                <span *ngIf=\\\"isValid('email')\\\">Entered email is invalid</span> -->\\r\\n              </div>\\r\\n          \\r\\n          </div>\\r\\n         \\r\\n  \\r\\n          <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\r\\n              <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n                  <mat-form-field class=\\\"full-width\\\">\\r\\n                      <input matInput placeholder=\\\"Password\\\" [type]=\\\"hide ? 'password' : 'text'\\\" formControlName=\\\"password\\\" required>\\r\\n                      <mat-icon matSuffix class=\\\"cursor\\\" (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\r\\n                      <mat-error *ngFor=\\\"let validation of account_validation_messages.password\\\">\\r\\n                        <mat-error class=\\\"error-message\\\" *ngIf=\\\"RegistrationForm.get('password').hasError(validation.type) && (RegistrationForm.get('password').dirty || RegistrationForm.get('password').touched)\\\">{{validation.message}}</mat-error>\\r\\n                      </mat-error>\\r\\n                    </mat-form-field>\\r\\n                  <!-- <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Password\\\" type=\\\"password\\\" formControlName=\\\"password\\\" id=\\\"pass\\\">\\r\\n                     <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>  \\r\\n                  </mat-form-field>\\r\\n                  <span *ngIf=\\\"isValid('password')\\\">Password is a mandatory field</span> -->\\r\\n                </div>\\r\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                    <input matInput placeholder=\\\"Confirm Password\\\" [type]=\\\"hide ? 'password' : 'text'\\\" formControlName=\\\"cnfPassword\\\"  [errorStateMatcher]=\\\"parentErrorStateMatcher\\\" required>\\r\\n                    <mat-icon matSuffix class=\\\"cursor\\\" (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\r\\n                    <mat-error *ngFor=\\\"let validation of account_validation_messages.confirm_password\\\">\\r\\n                      <mat-error class=\\\"error-message\\\" *ngIf=\\\"(RegistrationForm.get('cnfPassword').hasError(validation.type)|| RegistrationForm.get('password').hasError(validation.type)) && (RegistrationForm.get('cnfPassword').dirty || RegistrationForm.get('cnfPassword').touched)\\\">{{validation.message}}</mat-error>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                <!-- <mat-form-field class=\\\"example-container\\\" fxFlex=\\\"100\\\">\\r\\n                  <input matInput placeholder=\\\"Re-enter Password\\\" type=\\\"password\\\"  formControlName=\\\"cnfPassword\\\"  id=\\\"cnfPass\\\">\\r\\n    \\r\\n                </mat-form-field>\\r\\n                <span *ngIf=\\\"isValid('cnfPassword')\\\">Password and confirm password should match</span> -->\\r\\n              </div>\\r\\n           \\r\\n          </div>\\r\\n  \\r\\n          <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\r\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\" hintLabel=\\\"Max 256 characters\\\">\\r\\n                    <input matInput type=\\\"text\\\" #input maxlength=\\\"256\\\" placeholder=\\\"Address\\\" formControlName=\\\"address\\\" required>\\r\\n                    <mat-hint align=\\\"end\\\">{{input.value?.length || 0}}/256</mat-hint>\\r\\n                    <mat-error *ngFor=\\\"let validation of account_validation_messages.address\\\">\\r\\n                      <mat-error class=\\\"error-message\\\" *ngIf=\\\"RegistrationForm.get('address').hasError(validation.type) && (RegistrationForm.get('address').dirty || RegistrationForm.get('address').touched)\\\">{{validation.message}}</mat-error>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n              <!-- <mat-form-field class=\\\"example-container\\\" fxFlex=\\\"100\\\">\\r\\n                \\r\\n                <input matInput placeholder=\\\"Address\\\" formControlName=\\\"address\\\"  id=\\\"address\\\"\\r\\n                  required>\\r\\n  \\r\\n              </mat-form-field>\\r\\n              <span *ngIf=\\\"isValid('address')\\\">address is required</span> -->\\r\\n            </div>\\r\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\" hintLabel=\\\"Max 10 numbers\\\">\\r\\n                    <span matPrefix>+91 &nbsp;</span>\\r\\n                    <input matInput type=\\\"text\\\" #input1 maxlength=\\\"10\\\" placeholder=\\\"PhoneNumber\\\" formControlName=\\\"phoneNumber\\\" required>\\r\\n                    <!-- <mat-icon matSuffix>mode_edit</mat-icon> -->\\r\\n                    <mat-hint align=\\\"end\\\">{{input1.value?.length || 0}}/10</mat-hint>\\r\\n                    <mat-error *ngFor=\\\"let validation of account_validation_messages.phonenumber\\\">\\r\\n                      <mat-error class=\\\"error-message\\\" *ngIf=\\\"RegistrationForm.get('phoneNumber').hasError(validation.type) && (RegistrationForm.get('phoneNumber').dirty || RegistrationForm.get('phoneNumber').touched)\\\">{{validation.message}}</mat-error>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n              <!-- <mat-form-field class=\\\"example-container\\\" fxFlex=\\\"100\\\">\\r\\n                <input matInput placeholder=\\\"Phone Number\\\" type=\\\"number\\\" formControlName=\\\"phoneNumber\\\" id=\\\"phoneNumber\\\"\\r\\n                  required>\\r\\n  \\r\\n              </mat-form-field>\\r\\n              <span *ngIf=\\\"isValid('phoneNumber')\\\">phoneNumber is required</span> -->\\r\\n            </div>\\r\\n          </div>\\r\\n         <div fxLayout=\\\"row\\\">\\r\\n           <div fxFlex=\\\"100\\\">\\r\\n             \\r\\n                  <input type=\\\"file\\\"  (change)=\\\"onFileChange($event)\\\" style=\\\"display:none\\\" name=\\\"file-7[]\\\" id=\\\"file-7\\\" class=\\\"inputfile inputfile-6\\\" data-multiple-caption=\\\"{count} files selected\\\" multiple />\\r\\n                  <label class=\\\"box\\\" for=\\\"file-7\\\"><span [ngStyle]=\\\"styleOne?{'color': 'black'} : {'color': 'white'}\\\"></span> <strong><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"20\\\" height=\\\"17\\\" viewBox=\\\"0 0 20 17\\\"><path d=\\\"M10 0l-5.2 4.9h3.3v5.1h3.8v-5.1h3.3l-5.2-4.9zm9.3 11.5l-3.2-2.1h-2l3.4 2.6h-3.5c-.1 0-.2.1-.2.1l-.8 2.3h-6l-.8-2.2c-.1-.1-.1-.2-.2-.2h-3.6l3.4-2.6h-2l-3.2 2.1c-.4.3-.7 1-.6 1.5l.6 3.1c.1.5.7.9 1.2.9h16.3c.6 0 1.1-.4 1.3-.9l.6-3.1c.1-.5-.2-1.2-.7-1.5z\\\"/></svg> Upload a Image&hellip;</strong></label>\\r\\n              \\r\\n              <!-- <label for=\\\"file-upload\\\" class=\\\"custom-file-upload\\\">\\r\\n                  Custom Upload\\r\\n              </label> -->\\r\\n              <!-- <div class=\\\"file-field\\\">\\r\\n                  <div class=\\\"btn btn-primary btn-sm float-left\\\">\\r\\n                      <span>Choose file</span>\\r\\n                      <input type=\\\"file\\\">\\r\\n                  </div>\\r\\n                  <div class=\\\"file-path-wrapper\\\">\\r\\n                      <input class=\\\"file-path validate\\\" type=\\\"text\\\" placeholder=\\\"Upload your file\\\">\\r\\n                  </div>\\r\\n              </div> -->\\r\\n              <!-- <input id=\\\"file-upload\\\"style=\\\"width:200px\\\" size=\\\"60\\\" value=\\\"upload\\\" type=\\\"file\\\"/> -->\\r\\n              <!-- <input id=\\\"photo\\\" type=\\\"file\\\" /> -->\\r\\n            </div>\\r\\n            </div>\\r\\n         \\r\\n  \\r\\n  \\r\\n  \\r\\n  \\r\\n          <button mat-raised-button color=\\\"primary\\\" type=\\\"reset\\\" class=\\\"login register_margin\\\" [disabled]=\\\"userForm.invalid\\\" (click)=\\\"signUp()\\\">REGISTER</button>\\r\\n       \\r\\n        </form>\\r\\n  \\r\\n      </mat-card-content>\\r\\n      <div style=\\\"text-align: center;\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" class=\\\"login register_margin\\\" (click)=\\\"movetologin()\\\">Back to LoginPage</button>                \\r\\n      </div>\\r\\n  \\r\\n    </mat-card>\\r\\n   \\r\\n    \\r\\n  </div>\\r\\n  <!-- <div fxLayout=\\\"column\\\" fxFlexFill fxLayoutAlign=\\\"center center\\\" style=\\\"background-color:whitesmoke\\\">\\r\\n    \\r\\n    <mat-card>\\r\\n      <div>\\r\\n        <mat-card-title>\\r\\n            <div class=\\\"opticvision\\\">\\r\\n              <img src=\\\"assets/camera.png\\\" width=\\\"30px\\\"> \\r\\n              <span>ptic Visions</span>\\r\\n            </div>\\r\\n          </mat-card-title>\\r\\n          <mat-card-content>\\r\\n              <form class=\\\"example-container\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\" (submit)=\\\"loginUser($event)\\\" #userForm=\\\"ngForm\\\">\\r\\n                  <mat-form-field class=\\\"form_bottom\\\">\\r\\n                      <input matInput placeholder=\\\"Email\\\" #email=\\\"ngModel\\\"  [ngModel]=\\\"emailname\\\"  name =\\\"email\\\" required>\\r\\n                    \\r\\n                      </mat-form-field>\\r\\n                    <span style=\\\"color:red\\\" *ngIf=\\\"email.touched && !email.valid\\\">\\r\\n                    <div *ngIf=\\\"email.errors.required\\\">Email is Required</div>\\r\\n              \\r\\n                    </span>\\r\\n                  <mat-form-field class=\\\"form_bottom\\\">\\r\\n                    <input matInput placeholder=\\\"Password\\\" type=\\\"password\\\" name=\\\"password\\\" #password1=\\\"ngModel\\\" [ngModel]=\\\"passwordname\\\" required>\\r\\n                      <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon> \\r\\n                    </mat-form-field>\\r\\n                    <span style=\\\"color:red\\\" *ngIf=\\\"password1.touched && !password1.valid\\\">\\r\\n                      <div *ngIf=\\\"password1.errors.required\\\">Password is Required</div>\\r\\n                \\r\\n                      </span>\\r\\n                <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" class=\\\"login\\\" [disabled]=\\\"userForm.invalid\\\">Log In</button>\\r\\n              </form>\\r\\n              <div style=\\\"text-align:right\\\">\\r\\n                  <h3><a  class=\\\"redirect\\\" [routerLink]=\\\"['/register']\\\">Signup For Admin</a></h3>\\r\\n              </div>\\r\\n              \\r\\n            </mat-card-content>\\r\\n          </div>\\r\\n    </mat-card>\\r\\n    \\r\\n  </div>\\r\\n       -->\\r\\n  \\r\\n  \\r\\n  \\r\\n  \\r\\n  \\r\\n  <!-- <div fxLayout=\\\"row\\\" fxFlexFill fxLayoutAlign=\\\"center\\\" style=\\\"background-color:#677069;\\\">\\r\\n  \\r\\n          <div class=\\\" mat-elevation-z4\\\" >\\r\\n              <mat-card class=\\\"card\\\">\\r\\n                  <mat-card-title>\\r\\n                    <h2>SIGN IN</h2>\\r\\n                  </mat-card-title>\\r\\n                  <mat-card-content>\\r\\n                      <form fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\" (submit)=\\\"loginUser($event)\\\" #userForm=\\\"ngForm\\\">\\r\\n                          <mat-form-field>\\r\\n                              <input matInput placeholder=\\\"Enter your email\\\" #email=\\\"ngModel\\\"  [ngModel]=\\\"emailname\\\"  name =\\\"email\\\" required>\\r\\n                            \\r\\n                              </mat-form-field>\\r\\n                            <span style=\\\"color:red\\\" *ngIf=\\\"email.touched && !email.valid\\\">\\r\\n                            <div *ngIf=\\\"email.errors.required\\\">Email is Required</div>\\r\\n                      \\r\\n                            </span>\\r\\n                        <mat-form-field>\\r\\n                            <input matInput placeholder=\\\"Enter your password\\\" type=\\\"password\\\" name=\\\"password\\\" #password1=\\\"ngModel\\\" [ngModel]=\\\"passwordname\\\" required>\\r\\n                             <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\r\\n                            </mat-form-field>\\r\\n                            <span style=\\\"color:red\\\" *ngIf=\\\"password1.touched && !password1.valid\\\">\\r\\n                              <div *ngIf=\\\"password1.errors.required\\\">Password is Required</div>\\r\\n                        \\r\\n                              </span>\\r\\n                        <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"userForm.invalid\\\">log in</button>\\r\\n                      </form>\\r\\n                    </mat-card-content>\\r\\n                    <a class=\\\"redirect\\\" [routerLink]=\\\"['/register']\\\">Register an account</a>\\r\\n                  </mat-card>\\r\\n            \\r\\n  \\r\\n    </div>\\r\\n  \\r\\n  </div> -->\\r\\n\\r\\n\\r\\n<!-- <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" style=\\\"background-color:#e0e0e0;\\\">\\r\\n\\r\\n  <mat-card fxFlex=\\\"50\\\" class=\\\"mat-elevation-z4 visionheight\\\">\\r\\n    <mat-card-title style=\\\"text-align:center\\\" class=\\\"opticvision\\\">\\r\\n\\r\\n      <img src=\\\"assets/camera.png\\\" width=\\\"50px\\\">\\r\\n      <span>ptic Visions</span>\\r\\n\\r\\n    </mat-card-title>\\r\\n    <mat-card-content class=\\\"opticvision_1\\\">\\r\\n      <div class=\\\"backgroundcolor\\\">\\r\\n        <h3 style=\\\"text-align:center; padding: 5px;\\\">Sign Up For Admin</h3>\\r\\n      </div>\\r\\n\\r\\n      <form  [formGroup]=\\\"Registeration\\\" class=\\\"example-container\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\"\\r\\n        #userForm=\\\"ngForm\\\">\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n            <mat-form-field>\\r\\n              <input matInput placeholder=\\\"CompanyName\\\" #companyname=\\\"ngModel\\\" [ngModel]=\\\"companyName\\\" name=\\\"companyname\\\"\\r\\n                required>\\r\\n\\r\\n            </mat-form-field>\\r\\n            <span style=\\\"color:red\\\" *ngIf=\\\"companyname.touched && !companyname.valid\\\">\\r\\n                <div *ngIf=\\\"companyname.errors.required\\\">CompanyName is Required</div>\\r\\n  \\r\\n              </span>\\r\\n          </div>\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n            <mat-form-field>\\r\\n              <input matInput placeholder=\\\"Tin Number\\\" #tinnumber=\\\"ngModel\\\" [ngModel]=\\\"tinNumber\\\" name=\\\"tinnumber\\\"\\r\\n                required>\\r\\n\\r\\n            </mat-form-field>\\r\\n            <span style=\\\"color:red\\\" *ngIf=\\\"tinnumber.touched && !tinnumber.valid\\\">\\r\\n                <div *ngIf=\\\"tinnumber.errors.required\\\">Tin.No is Required</div>\\r\\n  \\r\\n              </span>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n            <mat-form-field class=\\\"example-container\\\" fxFlex=\\\"100\\\">\\r\\n              <input matInput placeholder=\\\"UserName\\\" #userName=\\\"ngModel\\\" [ngModel]=\\\"username\\\" name=\\\"username\\\"\\r\\n                required>\\r\\n\\r\\n            </mat-form-field>\\r\\n            <span style=\\\"color:red\\\" *ngIf=\\\"userName.touched && !userName.valid\\\">\\r\\n              <div *ngIf=\\\"userName.errors.required\\\">FirstName is Required</div>\\r\\n\\r\\n            </span>\\r\\n          </div>\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n              <mat-form-field>\\r\\n                <input matInput placeholder=\\\"Email\\\" #email=\\\"ngModel\\\" [ngModel]=\\\"emailname\\\" name=\\\"email\\\" pattern=\\\"^([a-zA-Z0-9_\\\\-\\\\.]+)@([a-zA-Z0-9_\\\\-\\\\.]+)\\\\.([a-zA-Z]{2,5})$\\\"\\r\\n                  required>\\r\\n  \\r\\n              </mat-form-field>\\r\\n              <span style=\\\"color:red\\\" *ngIf=\\\"email.touched && !email.valid\\\">\\r\\n                <div *ngIf=\\\"email.errors.required\\\">Email is Required</div>\\r\\n                <div *ngIf=\\\"email.errors.pattern\\\">Not a Valid Email</div>\\r\\n              </span>\\r\\n            </div>\\r\\n        \\r\\n        </div>\\r\\n       \\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\r\\n            <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n                <mat-form-field>\\r\\n                  <input matInput placeholder=\\\"Password\\\" type=\\\"password\\\" name=\\\"password\\\" #password1=\\\"ngModel\\\" [ngModel]=\\\"passwordname\\\"\\r\\n                    required>\\r\\n                  <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>  \\r\\n                </mat-form-field>\\r\\n                <span style=\\\"color:red\\\" *ngIf=\\\"password1.touched && !password1.valid\\\">\\r\\n                  <div *ngIf=\\\"password1.errors.required\\\">Password is Required</div>\\r\\n    \\r\\n                </span>\\r\\n              </div>\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n              <mat-form-field class=\\\"example-container\\\" fxFlex=\\\"100\\\">\\r\\n                <input matInput placeholder=\\\"ConfirmPassword\\\" #cnfPassword=\\\"ngModel\\\" [ngModel]=\\\"cnfpassword\\\" name=\\\"cnfpassword\\\" required>\\r\\n  \\r\\n              </mat-form-field>\\r\\n              <span style=\\\"color:red\\\" *ngIf=\\\"cnfPassword.touched && !cnfPassword.valid\\\">\\r\\n                <div *ngIf=\\\"cnfPassword.errors.required\\\">LastName is Required</div>\\r\\n              </span>\\r\\n            </div>\\r\\n         \\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-md=\\\"20px\\\">\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n            <mat-form-field class=\\\"example-container\\\" fxFlex=\\\"100\\\">\\r\\n              \\r\\n              <input matInput placeholder=\\\"Address\\\" #address=\\\"ngModel\\\" [ngModel]=\\\"Address\\\" name=\\\"address\\\"\\r\\n                required>\\r\\n\\r\\n            </mat-form-field>\\r\\n            <span style=\\\"color:red\\\" *ngIf=\\\"address.touched && !address.valid\\\">\\r\\n                <div *ngIf=\\\"address.errors.required\\\">Address is Required</div>\\r\\n  \\r\\n              </span>\\r\\n          </div>\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"example-container\\\">\\r\\n            <mat-form-field class=\\\"example-container\\\" fxFlex=\\\"100\\\">\\r\\n              <input matInput placeholder=\\\"Phone Number\\\" #phonenumber=\\\"ngModel\\\" [ngModel]=\\\"Phonenumber\\\" name=\\\"phonenumber\\\"\\r\\n                required>\\r\\n\\r\\n            </mat-form-field>\\r\\n            <span style=\\\"color:red\\\" *ngIf=\\\"phonenumber.touched && !phonenumber.valid\\\">\\r\\n                <div *ngIf=\\\"phonenumber.errors.required\\\">Phone Number is Required</div>\\r\\n  \\r\\n              </span>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n        <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" class=\\\"login\\\" [disabled]=\\\"userForm.invalid\\\" (click)=\\\"signUp()\\\">REGISTER</button>\\r\\n\\r\\n      </form>\\r\\n\\r\\n    </mat-card-content>\\r\\n\\r\\n\\r\\n  </mat-card>\\r\\n</div>\\r\\n <div fxLayout=\\\"column\\\" fxFlexFill fxLayoutAlign=\\\"center center\\\" style=\\\"background-color:whitesmoke\\\">\\r\\n\\t\\r\\n\\t<mat-card>\\r\\n\\t\\t<div>\\r\\n\\t\\t\\t<mat-card-title>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"opticvision\\\">\\r\\n\\t\\t\\t\\t\\t\\t<img src=\\\"assets/camera.png\\\" width=\\\"30px\\\"> \\r\\n\\t\\t\\t\\t\\t\\t<span>ptic Visions</span>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</mat-card-title>\\r\\n\\t\\t\\t\\t<mat-card-content>\\r\\n\\t\\t\\t\\t\\t\\t<form class=\\\"example-container\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\" (submit)=\\\"loginUser($event)\\\" #userForm=\\\"ngForm\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"form_bottom\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Email\\\" #email=\\\"ngModel\\\"  [ngModel]=\\\"emailname\\\"  name =\\\"email\\\" required>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  </mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span style=\\\"color:red\\\" *ngIf=\\\"email.touched && !email.valid\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div *ngIf=\\\"email.errors.required\\\">Email is Required</div>\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"form_bottom\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Password\\\" type=\\\"password\\\" name=\\\"password\\\" #password1=\\\"ngModel\\\" [ngModel]=\\\"passwordname\\\" required>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon> \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t  </mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t  <span style=\\\"color:red\\\" *ngIf=\\\"password1.touched && !password1.valid\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div *ngIf=\\\"password1.errors.required\\\">Password is Required</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" class=\\\"login\\\" [disabled]=\\\"userForm.invalid\\\">Log In</button>\\r\\n\\t\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t\\t\\t<div style=\\\"text-align:right\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<h3><a  class=\\\"redirect\\\" [routerLink]=\\\"['/register']\\\">Signup For Admin</a></h3>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t</mat-card-content>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t</mat-card>\\r\\n\\t\\r\\n</div>\\r\\n\\t\\t -->\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!-- <div fxLayout=\\\"row\\\" fxFlexFill fxLayoutAlign=\\\"center\\\" style=\\\"background-color:#677069;\\\">\\r\\n\\r\\n\\t\\t\\t\\t<div class=\\\" mat-elevation-z4\\\" >\\r\\n\\t\\t\\t\\t\\t\\t<mat-card class=\\\"card\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-card-title>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<h2>SIGN IN</h2>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-card-title>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-card-content>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<form fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\" (submit)=\\\"loginUser($event)\\\" #userForm=\\\"ngForm\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter your email\\\" #email=\\\"ngModel\\\"  [ngModel]=\\\"emailname\\\"  name =\\\"email\\\" required>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  </mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span style=\\\"color:red\\\" *ngIf=\\\"email.touched && !email.valid\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div *ngIf=\\\"email.errors.required\\\">Email is Required</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter your password\\\" type=\\\"password\\\" name=\\\"password\\\" #password1=\\\"ngModel\\\" [ngModel]=\\\"passwordname\\\" required>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  </mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  <span style=\\\"color:red\\\" *ngIf=\\\"password1.touched && !password1.valid\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div *ngIf=\\\"password1.errors.required\\\">Password is Required</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"userForm.invalid\\\">log in</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-card-content>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<a class=\\\"redirect\\\" [routerLink]=\\\"['/register']\\\">Register an account</a>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-card>\\r\\n\\t        \\r\\n\\r\\n\\t</div>\\r\\n\\r\\n</div> --> \"","module.exports = \".login {\\n  font-size: 20px;\\n  font-weight: bold;\\n  color: white;\\n  font-family: -webkit-body; }\\n\\n.forget {\\n  color: dodgerblue;\\n  text-align: right; }\\n\\n.opticvision {\\n  font-size: 50px;\\n  font-family: -webkit-body; }\\n\\n.opticvision span {\\n  color: dodgerblue; }\\n\\ndiv > span {\\n  font-size: 0.75rem;\\n  color: firebrick; }\\n\\n.is-invalid {\\n  font-size: 0.75rem;\\n  color: firebrick; }\\n\\n.form_bottom {\\n  margin: 20px 0px; }\\n\\n.visionheight {\\n  background-color: #ffffff; }\\n\\n.cursor {\\n  cursor: pointer; }\\n\\n@media only screen and (min-width: 1281px) {\\n  .opticvision_1 {\\n    font-size: 18px;\\n    font-family: -webkit-body; } }\\n\"","import { Component, OnInit, ChangeDetectorRef, ElementRef } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormControl, Validators, AbstractControl, FormBuilder } from '@angular/forms';\r\nimport{ passValidator,account_validation_messages } from '../custom-validators/custom-validator';\r\nimport { SignupService } from '../services/signup.service';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  email=\"^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$\";\r\n  hide = true;\r\n  account_validation_messages=account_validation_messages;\r\n  styleOne:boolean;\r\n  selectedfile:File=null;\r\n  //RegistrationForm: FormBuilder;\r\n  constructor(private router:Router,private elem: ElementRef,private fb:FormBuilder,private signupservice:SignupService,private snackbar:MatSnackBar,private cd: ChangeDetectorRef) {\r\n\r\n    // this.Registeration = new FormGroup({\r\n    //   companyName: new FormControl(null, Validators.required),\r\n    //   tinNumber: new FormControl(null, Validators.required),\r\n    //   userName: new FormControl(null, Validators.required),\r\n    //   email: new FormControl(null, Validators.email),\r\n    //   password: new FormControl(null, Validators.required),\r\n    //   cnfPassword: new FormControl(null, this.passValidator),\r\n    //   address: new FormControl(null, Validators.required),\r\n    //   phoneNumber: new FormControl(null, Validators.required)\r\n    // });\r\n    // this.Registeration.controls.password.valueChanges\r\n    //   .subscribe(\r\n    //     x => this.Registeration.controls.cnfPassword.updateValueAndValidity()\r\n    //   );\r\n   }\r\n  \r\n    RegistrationForm =this.fb.group({\r\n  companyName: ['',[Validators.required]],\r\n  tinNumber: [''],\r\n  userName: ['',Validators.compose([\r\n\t\tValidators.maxLength(25),\r\n\t\tValidators.minLength(3),\r\n\t\tValidators.pattern('^[a-zA-Z_ ]*$'),\r\n\t\tValidators.required\r\n\t])],\r\n  email: ['',Validators.compose([\r\n  \tValidators.required,\r\n  \tValidators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\r\n  ])\r\n],\r\n  password: ['',Validators.compose([\r\n    Validators.minLength(5),\r\n    Validators.required,\r\n    Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$') //this is for the letters (both uppercase and lowercase) and numbers validation\r\n ])\r\n],\r\n  cnfPassword: ['',Validators.compose([\r\n    Validators.required,\r\n    passValidator\r\n ])],\r\n  address: ['',[Validators.required]],\r\n  phoneNumber: ['',Validators.compose([\r\n    Validators.required,\r\n    Validators.minLength(10),\r\n    Validators.pattern('^[0-9]*$') //this is for the letters (both uppercase and lowercase) and numbers validation\r\n ])],\r\n})\r\n  ngOnInit() {\r\n    ;( function ( document, window, index )\r\n{\r\n\tvar inputs = document.querySelectorAll( '.inputfile' );\r\n\tArray.prototype.forEach.call( inputs, function( input )\r\n\t{\r\n\t\tvar label\t = input.nextElementSibling,\r\n\t\t\tlabelVal = label.innerHTML;\r\n\r\n\t\tinput.addEventListener( 'change', function( e )\r\n\t\t{\r\n\t\t\tvar fileName = '';\r\n\t\t\tif( this.files && this.files.length > 1 )\r\n\t\t\t\tfileName = ( this.getAttribute( 'data-multiple-caption' ) || '' ).replace( '{count}', this.files.length );\r\n\t\t\telse\r\n\t\t\t\tfileName = e.target.value.split( '\\\\' ).pop();\r\n\r\n\t\t\tif( fileName )\r\n\t\t\t\tlabel.querySelector( 'span' ).innerHTML = fileName;\r\n\t\t\telse\r\n\t\t\t\tlabel.innerHTML = labelVal;\r\n\t\t});\r\n\r\n\t\t// Firefox bug fix\r\n\t\tinput.addEventListener( 'focus', function(){ input.classList.add( 'has-focus' ); });\r\n\t\tinput.addEventListener( 'blur', function(){ input.classList.remove( 'has-focus' ); });\r\n\t});\r\n}( document, window, 0 ));\r\n  }\r\n  countfilelength:number;\r\n  onFileChange(event) {\r\n   // let count=<File>event.target.files\r\n   this.styleOne=true;\r\n   this.countfilelength=event.target.files.length;\r\n     this.selectedfile=<File>event.target.files[0];\r\n    \r\n     \r\n    // console.log(this.selectedFile)\r\n    // let inputEl: HTMLInputElement = this.elem.nativeElement.querySelector('#file-7');\r\n    // console.log(inputEl.files.item(0));\r\n   // this.RegistrationForm.getValue('photo').value\r\n    // const reader = new FileReader();\r\n \r\n    // if(event.target.files && event.target.files.length) {\r\n    //   const [file] = event.target.files;\r\n    //   reader.readAsDataURL(file);\r\n  \r\n    //   reader.onload = () => {\r\n    //     this.RegistrationForm.patchValue({\r\n    //       file: reader.result\r\n    //    });\r\n      \r\n    //     // need to run CD since file load runs outside of zone\r\n    //     this.cd.markForCheck();\r\n    //   };\r\n    // }\r\n  }\r\n  signUp(){\r\n   let formData = new FormData();\r\n       \r\n   \r\n        if ( this.countfilelength >= 0) { \r\n            \r\n                formData.append('userImage', this.selectedfile);\r\n                formData.append('companyName', this.RegistrationForm.value.companyName);\r\n                formData.append('tinNumber', this.RegistrationForm.value.tinNumber);\r\n                formData.append('userName', this.RegistrationForm.value.userName);\r\n                formData.append('email', this.RegistrationForm.value.email);\r\n                formData.append('password', this.RegistrationForm.value.password);\r\n                formData.append('cnfPassword', this.RegistrationForm.value.cnfPassword);\r\n                formData.append('address', this.RegistrationForm.value.address);\r\n                formData.append('phoneNumber', this.RegistrationForm.value.phoneNumber);\r\n               \r\n        }\r\n        \r\n      \r\n    // let files=this.elem.nativeElement.querySelector('#selectedFile').files;\r\n    // let fb=new FormData();\r\n    // let file= files[0];\r\n    // fb.append('selectedFile',file,file.name);\r\n    // console.log(fb);\r\n  //   console.log(this.RegistrationForm.value);\r\n    if (this.RegistrationForm.valid) {\r\n      this.signupservice.submitRegister(formData)\r\n      .subscribe(\r\n        (response)=>{\r\n          this.styleOne=false;\r\n           this.selectedfile=null;\r\n            this.snackbar.open(\"Registration Success\", \"Success\", {\r\n            duration: 2000,\r\n                  });\r\n        },\r\n       \r\n      (err)=>{\r\n        console.log(err);\r\n        if(err instanceof HttpErrorResponse){\r\n          if(err.status === 401){\r\n              this.snackbar.open(err.error,'Alert' ,{\r\n                duration:3000\r\n             });\r\n          }else{\r\n            this.snackbar.open(err.statusText,'Alert' ,{\r\n              duration:3000\r\n           });\r\n          }\r\n        }\r\n      }\r\n      );\r\n   }\r\n    \r\n     \r\n    }\r\n    movetologin(){\r\n    this.router.navigate(['/login']);\r\n    }\r\n\r\n  \r\n  \r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RegisterComponent } from './register.component';\r\nimport { RouterModule, Routes } from '@angular/router'; \r\nimport { \r\n  MatCardModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatToolbarModule\r\n } from '@angular/material';\r\n import { MDBBootstrapModule } from 'angular-bootstrap-md';\r\n import {MatTabsModule} from '@angular/material/tabs';\r\n import {MatSnackBarModule} from '@angular/material/snack-bar';\r\n import {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule , ReactiveFormsModule} from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nconst appRoutes: Routes = [\r\n    { path: '', component: RegisterComponent },\r\n]\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatCardModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatToolbarModule,\r\n  MatCheckboxModule,\r\n  MatFormFieldModule,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  FlexLayoutModule,\r\n  MatSnackBarModule,\r\n  MatTabsModule,\r\n  MDBBootstrapModule.forRoot(),\r\n    RouterModule.forChild(appRoutes),\r\n  ],\r\n  declarations: [RegisterComponent]\r\n})\r\nexport class RegisterModule { }\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Utils } from '../utils';\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignupService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  public getAll() {\n    return this.httpClient.get(`${Utils.getSignupURL()}`);\n  }\n  public submitRegister(body:any) {\n    return this.httpClient.post(`${Utils.getSignupURL()}`,body);\n  }\n}\n"],"sourceRoot":""}